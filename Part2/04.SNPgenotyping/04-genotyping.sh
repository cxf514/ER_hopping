#!/bin/bash
time1=`date +"%s"`  # record start time
thread_num=1  # number of threads prepare to be uesd(default=1)
bias=0.1  # tolerance of allele frequency bias;genotyping will fail if exceeds(default=0.1) 
total_num=10 # the minimum read number(uncollapsed) or UMI number(collapsed) in a loci for genotyping(default=10)
extension=".collapsed.txt"  # the extension of file3 generated in the script "03-collapse.shi";if the argument "-u" is not used in "01-SNPcalling.sh", here should be the file ".SNPcounting.txt" generated by script "02-SNPcounting.sh"
####################### Process the passing arguments ############################
while getopts "t:b:s:S:" opt       
do
	case ${opt} in 
		t)  # pass the number of thread prepared to used 
			if [ ${OPTARG:0:1} == "-" ]
			then
				echo "$0: Must provide an argument for -${opt}"
				exit
			fi
			thread_num=${OPTARG}
			;;
		b)  # pass the tolerance of allele frequency bias(0-0.25,default=0.1) 
			if [ ${OPTARG:0:1} == "-" ]
			then
				echo "$0: Must provide an argument for -${opt}"
				exit
			fi
			bias=${OPTARG}
			;;
		n)  # pass the minimum read number(uncollapsed) or UMI number(collapsed) in a loci for genotyping(default=10)
			if [ ${OPTARG:0:1} == "-" ]
			then
				echo "$0: Must provide an argument for -${opt}"
				exit
			fi
			total_num=${OPTARG}
			;;
		 s) #  pass the path of a file to be genotyped
                        if [ ${OPTARG:0:1} == "-" ]
                        then
                                echo "$0: Must provide an argument for -${opt}"
                                exit
                        fi
                        if [ ${S_done} ]
                        then
                                echo "$0: argument \"-s\" and \"-S\" can not be used together"
                                exit
                        fi
			file_dir=$(dirname ${OPTARG})
			file_list=$(basename ${OPTARG})
			s_done=1
                        ;;
                S)  # pass the path of a directory contain the files to be genotyped
                        if [ ${OPTARG:0:1} == "-" ]
                        then
                                echo "$0: Must provide an argument for -${opt}"
                                exit
                        fi
                        if [ ${s_done} ]
                        then
                                echo "$0: argument \"-s\" and \"-S\" can not be used together"
                                exit
                        fi
			file_dir=${OPTARG}
			file_list=$(ls ${file_dir}|grep "${extension}$")
                        S_done=1
                        ;;
		*)
			echo "passing arguments error"
			exit
			;;
	esac
done	
######################### Multi-threaded control ##################################
tmp_fifo_name="/tmp/$$.fifo"
mkfifo ${tmp_fifo_name}
exec 4<>${tmp_fifo_name}
rm -f ${tmp_fifo_name}
for ((i=0;i<thread_num;i++))
do
        echo "" >&4
done
########################## Arguments and Directory ################################
dir4="genotyping"
file4="genotyping.txt"
mkdir -p ${dir4} # make the directory 4
################################ Main process #####################################
for sample in ${file_list}
do
	read -u 4
	{
	name=${sample%${extension}}
	awk -F, 'BEGIN{
			OFS=",";
			print "rs_number,chr,read_start_pos,SNP_pos,mar,Fmar,sar,Fsar,genotype"
		 };
		 (NR>1){
		   	if($6>$7){max=$6;second=$7;max_genotype="A";sec_genotype="T"}else{max=$7;second=$6;max_genotype="T";sec_genotype="A"};
			if($8>max){second=max;sec_genotype=max_genotype;max=$8;max_genotype="C"}else if($8>second){second=$8;sec_genotype="C"};
			if($9>max){second=max;sec_genotype=max_genotype;max=$9;max_genotype="G"}else if($9>second){second=$9;sec_genotype="G"};
			if($10>second){
				gsub(/[\[\]]/,"",$11);
				split($11,INS,"[;=]");
				if(length(INS)>2){
					if(INS[2]>INS[4]){max_i=2;sec_i=4}else{max_i=4;sec_i=2};
					for(i=6;i<=length(INS);i+=2){
						if(INS[i]>INS[max_i]){sec_i=max_i;max_i=i}else if(INS[i]>INS[sec_i]){sec_i=i}
					};
					if(INS[sec_i]>max){max=INS[max_i];max_genotype=INS[max_i-1];second=INS[sec_i];sec_genotype=INS[sec_i-1];
					}else if(INS[max_i]>max){second=max;sec_genotype=max_genotype;max=INS[max_i];max_genotype=INS[max_i-1];
					}else{second=INS[max_i];sec_genotype=INS[max_i-1]};
				}else{
					if(INS[2]>max){second=max;sec_genotype=max_genotype;max=$10;max_genotype=INS[1]}else{second=$10;sec_genotype=INS[1]}
				};
			};
			if($12>second){
                                gsub(/[\[\]]/,"",$13);
                                split($13,DEL,"[;=]");
                                if(length(DEL)>2){
                                        if(DEL[2]>DEL[4]){max_i=2;sec_i=4}else{max_i=4;sec_i=2};
                                        for(i=6;i<=length(DEL);i+=2){
                                                if(DEL[i]>DEL[max_i]){sec_i=max_i;max_i=i}else if(DEL[i]>DEL[sec_i]){sec_i=i}
                                        };
                                        if(DEL[sec_i]>max){max=DEL[max_i];max_genotype=DEL[max_i-1];second=DEL[sec_i];sec_genotype=DEL[sec_i-1];
                                        }else if(DEL[max_i]>max){second=max;sec_genotype=max_genotype;max=DEL[max_i];max_genotype=DEL[max_i-1];
                                        }else{second=DEL[max_i];sec_genotype=DEL[max_i-1]};
                                }else{
                                        if(DEL[2]>max){second=max;sec_genotype=max_genotype;max=$12;max_genotype=DEL[1]}else{second=$12;sec_genotype=DEL[1]}
				};
			};
                        Fmar=max/$5;Fsar=second/$5;
			if(Fmar>(1-'${bias}')){genotype=max_genotype"/"max_genotype;
			}else if((Fsar>(0.5-'${bias}'))&&(Fmar>0.5)){genotype=max_genotype"/"sec_genotype;
			}else{genotype="failure"};
			if($5>='${total_num}'){print $1,$2,$3,$4,max_genotype,Fmar,sec_genotype,Fsar,genotype};
		 }' ${file_dir}/${sample} > ${dir4}/${name}.${file4}
	echo "" >&4
	} &
done
wait >/dev/null 2>&1
time2=`date +"%s"` # record end time
echo "run time = "$[${time2}-${time1}]" seconds"
exec 4>&-  # Delete file descriptor
